@page "/"
@using TaskoMask.Presentation.UI.UserPanel.Pages.Dashboard.Components
@inject TaskoMask.Presentation.Framework.Share.Contracts.IOrganizationClientService OrganizationClientService
@implements IDisposable

@if (!Model.OrganizationsDetailsList.Any())
{
    <div class="alert alert-warning">
        You are not owner of any organization!
        <br />
        Maybe you want to
        <a @onclick="@(() => ModalService.Show<Pages.Organizations.Components.Upsert>("Create new organization",new ModalOptions{DisableBackgroundCancel=true}))" class="text-info">create one</a>
    </div>
}
else
{
    <div id="dashboard-page" class="container py-3">
        <div class="row">
            <Organizations Model="@Model.OrganizationsDetailsList" />
        </div>
    </div>
}


@code {

    PanelDashboardViewModel Model;


    /// <summary>
    /// /
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //subscribe to OnMessage event. It is used when another components need to send a message to this component
        MessageService.OnMessage += ReloadDataHandler;

        await LoadDataAsync();
    }



    /// <summary>
    /// /
    /// </summary>
    private async Task LoadDataAsync()
    {
        Model = new PanelDashboardViewModel();

        var organizationsDetailsListResult = await OrganizationClientService.Get();
        if (!organizationsDetailsListResult.IsSuccess)
            ToastService.ShowError(organizationsDetailsListResult.Errors.ParseToHtml(), organizationsDetailsListResult.Message);
        else
            Model.OrganizationsDetailsList = organizationsDetailsListResult.Value;
    }



    /// <summary>
    ///This is a handler to be notified when some interesting events happened
    ///For example we like to reload data for this component when new organization created by Organizations.Components.Upsert component
    /// </summary>
    private async void ReloadDataHandler(MessageType messageType)
    {
        try
        {
            await LoadDataAsync();
            StateHasChanged();
        }
        catch
        {
            //Async task failure because of async void challenges
        }
    }




    /// <summary>
    ///
    /// </summary>
    public void Dispose()
    {
        // unsubscribe from OnMessage event
        MessageService.OnMessage -= ReloadDataHandler;
    }
}