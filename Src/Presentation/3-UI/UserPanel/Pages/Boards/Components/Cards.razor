@using TaskoMask.Application.Share.Dtos.Workspace.Cards
@using TaskoMask.Application.Share.ViewModels
@inject TaskoMask.Presentation.Framework.Share.Contracts.ITaskClientService TaskClientService
@inject TaskoMask.Presentation.UI.UserPanel.Services.DragDrop.IDragDropService DragDropService

<div class="card-deck">
    @foreach (var item in Model)
    {
        <div class="card task-card mb-2">
            <h6 class="card-header">
                @item.Card.Name

                <a @onclick="@(()=>ShowUpdateCardModal(item.Card.Id))" class="float-right small text-warning">
                    <i class="bi bi-pencil"></i> edit
                </a>
            </h6>
            <div class="card-body px-1" ondrop="@(()=>HandleDrop(item.Card.Id))" ondragover="event.preventDefault();">
                <Tasks Model=@item.Tasks CardId=@item.Card.Id></Tasks>
            </div>
        </div>
    }

    <TempCards CardsCount=@Model.Count() BoardId=@BoardId></TempCards>
</div>



@code {

    [Parameter]
    public string BoardId { get; set; }

    [Parameter]
    public IEnumerable<CardDetailsViewModel> Model { get; set; }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleDrop(string cardId)
    {
        var draggedTaskId = DragDropService.GetDraggedData();
        var result = await TaskClientService.MoveTaskToAnotherCard(draggedTaskId, cardId);

        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Task_Moved)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService);
    }



    /// <summary>
    ///
    /// </summary>
    private void ShowCreateCardModal()
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Cards.Components.CreateOrUpdateCard.BoardId), BoardId);
        ModalService.Show<Pages.Cards.Components.CreateOrUpdateCard>("Create Card", parameters, new ModalOptions { Class="blazored-modal bg-light-gray"});
    }


    /// <summary>
    ///
    /// </summary>
    private void ShowUpdateCardModal(string cardId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Cards.Components.CreateOrUpdateCard.CardId), cardId);
        ModalService.Show<Pages.Cards.Components.CreateOrUpdateCard>("Update Card", parameters, new ModalOptions { Class="blazored-modal bg-light-gray"});
    }

}
