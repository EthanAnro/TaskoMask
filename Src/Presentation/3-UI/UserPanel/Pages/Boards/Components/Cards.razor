@using TaskoMask.Application.Share.Dtos.Workspace.Cards
@using TaskoMask.Application.Share.ViewModels
@inject TaskoMask.Presentation.Framework.Share.Contracts.ITaskClientService TaskClientService
@inject TaskoMask.Presentation.UI.UserPanel.Services.DragDrop.IDragDropService DragDropService
@if (!Model.Any())
{
    <div class="alert alert-warning">
        <b>There isn't any card yet!</b>
        <hr>
        <small>
            You can add new card by using
            <b>
                <a @onclick="@(()=>ShowCreateCardModal())" class="text-info">
                    <i class="bi bi-card-list"></i>
                    New Card
                </a>
            </b>
            item from the top breadcrumb bar.
        </small>
    </div>
}
else
{
    <div class="card-deck bg-light">
        @foreach (var item in Model)
        {
            <div class="card">
                <h5 class="card-header">
                    @item.Card.Name
                    <a @onclick="@(()=>ShowUpdateCardModal(item.Card.Id))" class="text-warning" title="Edit">
                        <i class="bi bi-pencil"></i>
                    </a>
                </h5>
                <div class="card-body" ondrop="@(()=>HandleDrop(item.Card.Id))" ondragover="event.preventDefault();">
                    <Tasks Model=item.Tasks CardId=@item.Card.Id></Tasks>
                </div>
            </div>
        }
    </div>

}



@code {

    [Parameter]
    public string BoardId { get; set; }

    [Parameter]
    public IEnumerable<CardDetailsViewModel> Model { get; set; }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleDrop(string cardId)
    {
        var draggedTaskId = DragDropService.GetDraggedData();
        var result = await TaskClientService.MoveTaskToAnotherCard(draggedTaskId, cardId);
        DataServiceHandler.Handle(result, ToastService, MessageService, MessageType.Task_Moved);
    }



    /// <summary>
    ///
    /// </summary>
    private void ShowCreateCardModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Cards.Components.Upsert.BoardId), BoardId);
        ModalService.Show<Upsert>("Create Card", parameters, new ModalOptions { DisableBackgroundCancel = true });
    }


    /// <summary>
    ///
    /// </summary>
    private void ShowUpdateCardModal(string cardId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Cards.Components.Upsert.CardId), cardId);
        ModalService.Show<Pages.Cards.Components.Upsert>("Update Card", parameters, new ModalOptions { DisableBackgroundCancel = true });
    }



}
