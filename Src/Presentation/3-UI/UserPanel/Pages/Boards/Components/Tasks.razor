@using TaskoMask.Application.Share.Dtos.Workspace.Tasks
@inject TaskoMask.Presentation.UI.UserPanel.Services.DragDrop.IDragDropService DragDropService

<ul class="list-group list-group-flush">

    <li class="list-group-item list-group-item-warning">
        <b>
            <i class="bi bi-list-task"></i>
            <a @onclick="@(()=>ShowCreateModal())" class="text-info">Add new Task</a>
        </b>
    </li>

    @if (Model.Any())
    {
        foreach (var item in Model)
        {
            <li class="list-group-item" draggable="true" ondragstart="@(() => HandleDragStart(item.Id))">
                <a @onclick="@(()=>ShowDetailsModal(item.Id))" class="text-black">
                    <div>
                        <i class="bi bi-list-task"></i>
                        @item.Title

                    </div>
                </a>
            </li>
        }
    }
</ul>


@code {

    [Parameter]
    public IEnumerable<TaskBasicInfoDto> Model { get; set; }

    [Parameter]
    public string CardId { get; set; }


    /// <summary>
    ///
    /// </summary>
    private void ShowCreateModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Tasks.Components.Upsert.CardId), CardId);
        ModalService.Show<Pages.Tasks.Components.Upsert>("Create Task", parameters, new ModalOptions { DisableBackgroundCancel = true });
    }



    /// <summary>
    ///
    /// </summary>
    private void ShowDetailsModal(string taskId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Pages.Tasks.Components.Details.TaskId), taskId);
        ModalService.Show<Pages.Tasks.Components.Details>("Task Details", parameters, new ModalOptions { DisableBackgroundCancel = true ,Class="blazored-modal w-75"});
    }



    /// <summary>
    ///
    /// </summary>
    private void HandleDragStart(string taskId)
    {
        DragDropService.SetDraggedData(taskId);
    }



}
