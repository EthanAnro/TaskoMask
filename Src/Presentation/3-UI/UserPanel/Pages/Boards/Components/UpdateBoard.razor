@using TaskoMask.Application.Share.Dtos.Workspace.Boards
@inject TaskoMask.Presentation.Framework.Share.Contracts.IBoardClientService BoardClientService
@inject TaskoMask.Presentation.Framework.Share.Contracts.IProjectClientService ProjectClientService
@inject TaskoMask.Presentation.Framework.Share.Contracts.IOrganizationClientService OrganizationClientService

<EditForm Model="BoardModel" OnValidSubmit="HandleUpdate">

    <DataAnnotationsValidator />

    <div class="form-group">
        <InputText @bind-Value="BoardModel.Name" placeholder="Name" class="form-control"></InputText>
        <ValidationMessage For="()=>BoardModel.Name" class="text-danger"></ValidationMessage>
    </div>

    <div class="form-group">
        <InputText @bind-Value="BoardModel.Description" placeholder="Description" class="form-control"></InputText>
        <ValidationMessage For="()=>BoardModel.Description" class="text-danger"></ValidationMessage>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary mr-1">Update</button>
        <a @onclick="HandleDelete" class="btn btn-danger text-white mr-1">Delete</a>
        <a @onclick="@(()=>ModalInstance.CancelAsync())" class="btn btn-warning text-white mr-1">Cancel</a>
    </div>

</EditForm>

@code {


    #region Fields and Parameters



    /// <summary>
    /// Get the board to update by its Id
    /// </summary>
    [Parameter]
    public string Id { get; set; }



    /// <summary>
    /// Form Model
    /// </summary>
    BoardUpdateDto BoardModel = new BoardUpdateDto();



    /// <summary>
    /// Access to current modal
    /// </summary>
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }




    #endregion Fields and Parameters



    #region Protected Methods


    /// <summary>
    ///
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await PrepareModelToUpdate();

    }


    #endregion Protected Methods


    #region private Methods



    /// <summary>
    /// Prepare the form model
    /// </summary>
    private async Task PrepareModelToUpdate()
    {

        var boardResult = await BoardClientService.Get(Id);

        if (boardResult.IsSuccess)
        {
            BoardModel = new BoardUpdateDto
                {
                    Id = boardResult.Value.Id,
                    Name = boardResult.Value.Name,
                    Description = boardResult.Value.Description,
                };
        }
        else
        {
            //close the modal window
            ModalInstance.CloseAsync();
            ToastService.ShowError(boardResult.Errors.ParseToFragment(), boardResult.Message);
        }
    }



    /// <summary>
    /// handle update model
    /// </summary>
    private async Task HandleUpdate()
    {
        var result = await BoardClientService.Update(Id, BoardModel);
        DataServiceHandler.Handle(result, ToastService, MessageService, MessageType.Board_Updated, ModalInstance);
    }



    /// <summary>
    /// handle delete item
    /// </summary>
    private async Task HandleDelete()
    {
        var confirmationModal = ModalService.Show<Confirmation>("Deletion warning!");
        var confirmationModalResult = await confirmationModal.Result;

        if (confirmationModalResult.Cancelled)
            return;

        var result = await BoardClientService.Delete(Id);
        DataServiceHandler.Handle(result, ToastService, MessageService, MessageType.Board_Deleted, ModalInstance);
    }



    #endregion private Methods

}