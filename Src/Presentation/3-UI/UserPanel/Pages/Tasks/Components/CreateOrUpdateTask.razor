@using TaskoMask.Application.Share.Dtos.Workspace.Tasks
@inject TaskoMask.Presentation.Framework.Share.Contracts.ITaskClientService TaskClientService
@inject TaskoMask.Presentation.Framework.Share.Contracts.ICardClientService CardClientService

<EditForm Model="TaskModel" OnValidSubmit="HandleUpsert">

    <DataAnnotationsValidator />

    <input type="hidden" @bind="TaskModel.CardId" />


    <div class="form-group">
        <InputText @bind-Value="TaskModel.Title" placeholder="Title" class="form-control"></InputText>
        <ValidationMessage For="()=>TaskModel.Title" class="text-danger"></ValidationMessage>
    </div>


    <div class="form-group">
        <InputTextArea @bind-Value="TaskModel.Description" placeholder="Description" class="form-control" rows="15"></InputTextArea>
        <ValidationMessage For="()=>TaskModel.Description" class="text-danger"></ValidationMessage>
    </div>

    <div class="form-group">
        @if (isUpdate)
        {
            <button type="submit" class="btn btn-primary mr-1">Update</button>
            <a @onclick="HandleDelete" class="btn btn-danger text-white mr-1">Delete</a>
        }
        else
        {
            <button type="submit" class="btn btn-primary mr-1">Create</button>
        }
        <a @onclick="@(()=>ModalInstance.CancelAsync())" class="btn btn-warning text-white mr-1">Cancel</a>
    </div>

</EditForm>

@code {

    #region Fields and Parameters


    [Parameter]
    public string TaskId { get; set; }

    [Parameter]
    public string CardId { get; set; }



    TaskUpsertDto TaskModel = new TaskUpsertDto();

    /// <summary>
    /// Access to current modal
    /// </summary>
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }


    /// <summary>
    /// To specify form role (create or update)
    /// </summary>
    bool isUpdate = false;

    #endregion Fields and Parameters


    #region Protected Methods


    /// <summary>
    ///
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //if Id has value so we need to handle update
        if (!string.IsNullOrEmpty(TaskId))
            await PrepareModelToUpdate();
        else
            TaskModel.CardId = CardId;
    }


    #endregion Protected Methods


    #region private Methods



    /// <summary>
    /// Get model by Id from API
    /// </summary>
    private async Task PrepareModelToUpdate()
    {
        isUpdate = true;

        var taskResult = await TaskClientService.Get(TaskId);

        if (taskResult.IsSuccess)
        {
            TaskModel = new TaskUpsertDto
                {
                    Id = taskResult.Value.Id,
                    Title = taskResult.Value.Title,
                    Description = taskResult.Value.Description,
                    CardId = taskResult.Value.CardId,
                };
        }
        else
        {
            QueryResultHandler<TaskBasicInfoDto>.Init()
                .WithResult(taskResult)
                .ShowErrorToast(ToastService)
                .CloseModal(ModalInstance);
        }
    }



    /// <summary>
    /// Handle form role
    /// </summary>
    private async Task HandleUpsert()
    {
        if (isUpdate)
            await HandleUpdate();
        else
            await HandleCreate();
    }



    /// <summary>
    /// handle create model
    /// </summary>
    private async Task HandleCreate()
    {
        TaskModel.CardId = CardId;
        var result = await TaskClientService.Create(TaskModel);
        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Task_Created)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService);
    }



    /// <summary>
    /// handle update model
    /// </summary>
    private async Task HandleUpdate()
    {
        var result = await TaskClientService.Update(TaskId, TaskModel);
        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Task_Updated)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService);
    }



    /// <summary>
    /// handle delete item
    /// </summary>
    private async Task HandleDelete()
    {
        var confirmationModal = ModalService.Show<Confirmation>("Deletion warning!");
        var confirmationModalResult = await confirmationModal.Result;

        if (confirmationModalResult.Cancelled)
            return;

        var result = await TaskClientService.Delete(TaskId);
        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Task_Deleted)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService);
    }

    #endregion private Methods
}
