@using TaskoMask.Application.Share.Dtos.Workspace.Comments
@inject TaskoMask.Presentation.Framework.Share.Contracts.ICommentClientService CommentClientService

<EditForm Model="CommentModel" OnValidSubmit="HandleUpdate">

    <input type="hidden" @bind="CommentModel.TaskId" />

    <DataAnnotationsValidator />

    <div class="form-group">
        <InputText @bind-Value="CommentModel.Content" placeholder="Content" class="form-control"></InputText>
        <ValidationMessage For="()=>CommentModel.Content" class="text-danger"></ValidationMessage>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary mr-1">Update</button>
        <a @onclick="HandleDelete" class="btn btn-danger text-white mr-1">Delete</a>
        <a @onclick="@(()=>ModalInstance.CancelAsync())" class="btn btn-warning text-white mr-1">Cancel</a>
    </div>

</EditForm>

@code {


    #region Fields and Parameters



    /// <summary>
    /// Get the comment to update by its Id
    /// </summary>
    [Parameter]
    public string Id { get; set; }



    /// <summary>
    /// Form Model
    /// </summary>
    CommentUpsertDto CommentModel = new CommentUpsertDto();



    /// <summary>
    /// Access to current modal
    /// </summary>
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }




    #endregion Fields and Parameters



    #region Protected Methods


    /// <summary>
    ///
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await PrepareModelToUpdate();

    }


    #endregion Protected Methods


    #region private Methods



    /// <summary>
    /// Prepare the form model
    /// </summary>
    private async Task PrepareModelToUpdate()
    {

        var commentResult = await CommentClientService.Get(Id);

        if (commentResult.IsSuccess)
        {
            CommentModel = new CommentUpsertDto
                {
                    Id = commentResult.Value.Id,
                    Content = commentResult.Value.Content,
                    TaskId = commentResult.Value.TaskId,
                };
        }
        else
        {
            QueryResultHandler<CommentBasicInfoDto>.Init()
                .WithResult(commentResult)
                .ShowErrorToast(ToastService)
                .CloseModal(ModalInstance);
        }
    }



    /// <summary>
    /// handle update model
    /// </summary>
    private async Task HandleUpdate()
    {
        var result = await CommentClientService.Update(Id, CommentModel);
        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Comment_Updated)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService)
            .CloseModal(ModalInstance);
    }



    /// <summary>
    /// handle delete item
    /// </summary>
    private async Task HandleDelete()
    {
        var confirmationModal = ModalService.Show<Confirmation>("Deletion warning!");
        var confirmationModalResult = await confirmationModal.Result;

        if (confirmationModalResult.Cancelled)
            return;

        var result = await CommentClientService.Delete(Id);
        CommandResultHandler.Init()
            .WithResult(result)
            .WithMessageType(MessageType.Comment_Deleted)
            .ShowErrorToast(ToastService)
            .PublishMessage(MessageService)
            .CloseModal(ModalInstance);
    }



    #endregion private Methods

}