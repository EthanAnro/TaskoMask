@page "/login"
@using TaskoMask.Application.Share.Dtos.Common.Users
@inject TaskoMask.Presentation.Framework.Share.Contracts.IAccountWebService AccountWebService
@inject IJSRuntime JsRuntime

<section id="cover">
    <div id="cover-caption">
        <div class="container">
            <div class="row text-white">
                <div class="col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4">
                    <h3 class=" py-2 ">Login to TaskoMask!</h3>
                    <div class="px-2">
                        <EditForm Model="LoginModel" OnValidSubmit="HandleLogin" class="justify-content-center">
                           <DataAnnotationsValidator />
                            <div class="form-group">
                                <InputText @bind-Value="LoginModel.Email" placeholder="Email" class="form-control"></InputText>
                                <ValidationMessage For="()=>LoginModel.Email"  class="text-danger"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <InputText type="password" @bind-Value="LoginModel.Password" placeholder="Password" class="form-control"></InputText>
                                <ValidationMessage For="()=>LoginModel.Password" class="text-danger"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <a href="#">Forget Password</a>
                            </div>

                            <button type="submit" class="btn btn-primary btn-lg">login</button>
                            <NavLink class="btn btn-secondary btn-lg" href="/register">
                                Register
                            </NavLink>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private  UserLoginDto LoginModel = new UserLoginDto();

    private async Task HandleLogin()
    {
        var result = await AccountWebService.Login(LoginModel);
        if (result.IsSuccess)
        {
             await JsRuntime.InvokeVoidAsync("alert", $"login success. token={result.Value}");
        }
        else
        {
             await JsRuntime.InvokeVoidAsync($"alert", $"login failed! message= {result.Message}");
        }
    }

}
