@using TaskoMask.Application.Share.Dtos.Team.Organizations
@inject TaskoMask.Presentation.Framework.Share.Contracts.IOrganizationClientService OrganizationClientService

<EditForm Model="OrganizationModel" OnValidSubmit="HandleUpsert">

    <DataAnnotationsValidator />

    <div class="form-group">
        <InputText @bind-Value="OrganizationModel.Name" placeholder="Name" class="form-control"></InputText>
        <ValidationMessage For="()=>OrganizationModel.Name" class="text-danger"></ValidationMessage>
    </div>
    <div class="form-group">
        <InputText @bind-Value="OrganizationModel.Description" placeholder="Description" class="form-control"></InputText>
        <ValidationMessage For="()=>OrganizationModel.Description" class="text-danger"></ValidationMessage>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary mr-1">@submitBtnName</button>
        @if (isUpdate)
        {
            <a @onclick="HandleDelete" class="btn btn-danger text-white mr-1">Delete</a>
        }
        <a @onclick="@(()=>ModalInstance.CancelAsync())" class="btn btn-warning text-white mr-1">Cancel</a>
    </div>

</EditForm>

@code {

    //use for update mode
    [Parameter]
    public string Id { get; set; }

    bool isUpdate = false;
    string submitBtnName = "Create";

    OrganizationUpsertDto OrganizationModel = new OrganizationUpsertDto();

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }


    /// <summary>
    /// /
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //if Id has value it must handle update so get data by id from api
        if (!string.IsNullOrEmpty(Id))
        {
            submitBtnName = "Update";
            isUpdate = true;

            var organizationResult = await OrganizationClientService.Get(Id);
            if (!organizationResult.IsSuccess)
            {
                //close the modal window
                ModalInstance.CloseAsync();
                ToastService.ShowError(organizationResult.Errors.ParseToHtml(), organizationResult.Message);
            }
            else
                OrganizationModel = new OrganizationUpsertDto
                    {
                        Id = organizationResult.Value.Id,
                        Name = organizationResult.Value.Name,
                        Description = organizationResult.Value.Description,
                    };

        }
    }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleUpsert()
    {
        if (isUpdate)
            await HandleUpdate();
        else
            await HandleCreate();
    }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleCreate()
    {
        var result = await OrganizationClientService.Create(OrganizationModel);
        HandleResult(result, MessageType.Organization_Created);
    }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleUpdate()
    {
        var result = await OrganizationClientService.Update(OrganizationModel);
        HandleResult(result, MessageType.Organization_Updated);
    }



    /// <summary>
    ///
    /// </summary>
    private async Task HandleDelete()
    {
       var confirmationModal = ModalService.Show<Confirmation>("Deletion warning!");
       var confirmationModalResult = await confirmationModal.Result;

        if (confirmationModalResult.Cancelled)
            return;

        var result = await OrganizationClientService.Delete(Id);
        HandleResult(result, MessageType.Organization_Deleted);
    }



    /// <summary>
    ///
    /// </summary>
    private void HandleResult(Result<CommandResult> result, MessageType messageType)
    {
        if (result.IsSuccess)
        {
            ModalInstance.CloseAsync();
            ToastService.ShowSuccess(result.Value.Message, result.Message);
            //send a message to listeners (dashboard index component)
            MessageService.SendMessage(messageType);
        }
        else
            ToastService.ShowError(result.Errors.ParseToHtml(), result.Message);
    }

}