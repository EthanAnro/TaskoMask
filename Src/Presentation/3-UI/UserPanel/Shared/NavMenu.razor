@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject TaskoMask.Domain.Share.Services.IAuthenticatedUserService AuthenticatedUserService
@inject TaskoMask.Presentation.Framework.Share.Contracts.IOwnerClientService OwnerClientService

<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">

    <a class="navbar-brand btn btn-outline-light text-dark-hover" href="@websiteUrl">TaskoMask</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarsExampleDefault">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="m-1 btn btn-sm btn-info" href="@websiteUrl">
                    <i class="bi bi-house-fill" title="Home"></i>
                </a>
            </li>
            <AuthorizeView>
                <li class="nav-item">
                    <NavLink class="m-1 btn btn-sm btn-success" href="" Match="NavLinkMatch.All">
                        <i class="bi bi-speedometer" title="dashboard"></i>
                    </NavLink>
                </li>
            </AuthorizeView>
        </ul>
        <div class="form-inline my-2 my-lg-0">
            <AuthorizeView>
                <div class="dropdown show">

                    <a class="btn btn-secondary btn-success dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="bi bi bi-plus-circle" title="dashboard"></i>
                    </a>

                    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                        <NavLink class="dropdown-item" @onclick="@(() => ModalService.Show<Pages.Organizations.Components.Upsert>("Create new organization",new ModalOptions{DisableBackgroundCancel=true}))">
                            <i class="bi bi-building"></i>
                            New Organization
                        </NavLink>

                        <NavLink class="dropdown-item" @onclick="@(() => ModalService.Show<Pages.Projects.Components.Upsert>("Create new project",new ModalOptions{DisableBackgroundCancel=true}))">
                            <i class="bi bi-kanban"></i>
                            New Project
                        </NavLink>

                        <NavLink class="dropdown-item" @onclick="@(() => ModalService.Show<Pages.Boards.Components.Upsert>("Create new board",new ModalOptions{DisableBackgroundCancel=true}))">
                            <i class="bi bi-clipboard-plus"></i>
                            New Board
                        </NavLink>

                        <NavLink class="dropdown-item" href="#">
                            <i class="bi bi-people"></i>
                            Add Member
                        </NavLink>
                    </div>
                </div>
            </AuthorizeView>

            <AuthorizeView>
                <Authorized>

                    <NavLink id="update_user_profile" @onclick="@(() => ModalService.Show<Pages.Owner.Components.Update>("Update User Profile",new ModalOptions{DisableBackgroundCancel=true}))" class="m-1 btn btn-sm btn-warning my-2 my-sm-0">
                        <i class="bi bi-person-circle"></i>
                        @userDisplayName
                    </NavLink>

                    <a class="m-1 btn btn-sm btn-danger my-2 my-sm-0" href="/logout">
                        <i class="bi bi-power"></i>
                    </a>
                </Authorized>

                <NotAuthorized>
                    <a class="m-1 btn btn-sm btn-success my-2 my-sm-0" href="/login">
                        login
                    </a>
                </NotAuthorized>
            </AuthorizeView>

        </div>
    </div>
</nav>

@code {
    string websiteUrl = "#";
    string userDisplayName = "";
    protected override async Task OnInitializedAsync()
    {
        //subscribe to OnMessage event. It is used when another components need to send a message to this component
        MessageService.OnMessage += ReloadUserDisplayNameHandler;

        websiteUrl = Configuration["Url:Website"];

        var user = AuthenticatedUserService.GetAuthenticatedUser();
        userDisplayName = user.DisplayName;

        await base.OnInitializedAsync();
    }



    /// <summary>
    ///This is a handler to be notified when user display name is changed somewhere
    /// </summary>
    private async void ReloadUserDisplayNameHandler(MessageType messageType)
    {
        try
        {
            var ownerResult = await OwnerClientService.Get();
            if (ownerResult.IsSuccess)
            {
                userDisplayName = ownerResult.Value.DisplayName;
                StateHasChanged();
            }
        }
        catch
        {
            //Async task failure because of async void challenges
        }
    }


    

    /// <summary>
    ///
    /// </summary>
    public void Dispose()
    {
        // unsubscribe from OnMessage event
        MessageService.OnMessage -= ReloadUserDisplayNameHandler;
    }
}